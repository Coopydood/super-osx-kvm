#!/usr/bin/env python3
# pylint: disable=C0301,C0116,C0103,R0903

"""
This script was created by Coopydood as part of the ultimate-macOS-KVM project.

https://github.com/user/Coopydood
https://github.com/Coopydood/ultimate-macOS-KVM
Signature: 4CD28348A3DD016F

"""

# This script should NOT be run directly, but instead from the main "main.py" script.

import os
import time
import subprocess
import re 
import json
import sys
import argparse

sys.path.insert(0, 'scripts')

detectChoice = 1
latestOSName = "Sonoma"
latestOSVer = "14"
runs = 0

#global USR_SCREEN_RES

#USR_SCREEN_RES = open("./blobs/user/USR_SCREEN_RES.apb")
#USR_SCREEN_RES = USR_SCREEN_RES.read()

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

def startup():
    global detectChoice
    print("\n\n   Welcome to"+color.BOLD+color.PURPLE,"USB Passthrough Assistant"+color.END,"")
    print("   Created by",color.BOLD+"Coopydood\n"+color.END)
    print("   This script will attempt to guide you through the process\n   of passing through your host's USB devices for use\n   within the guest. This is advanced and requires patience. Seriously.\n")
    #print(color.BOLD+"\n"+"Profile:"+color.END,"https://github.com/Coopydood")
    #print(color.BOLD+"   Repo:"+color.END,"https://github.com/Coopydood/ultimate-macOS-KVM")
    print("   Select an option to continue.")
    print(color.BOLD+"\n      1. Start")
    print(color.END+"         Continue to requirements list and prepare your sanity\n")
    #print(color.END+"      2. Check GPU compatibility")
    print(color.END+"      B. Back...")
    print(color.END+"      Q. Exit\n")
    detectChoice = str(input(color.BOLD+"Select> "+color.END))

       


def clear(): print("\n" * 150)


def stage5():
    global slotCount
    global slotContainer
    global slotContainerPT
    global slotContainerType
    global currentVID
    global currentType
    global slotContainerROM
    global deviceLines
    currentEditVal = -1
    currentAddr = -1
    deviceLines = []


    def manualAPSelect():
        print("\n\n   "+color.BOLD+"Select AutoPilot Config File"+color.END,"")
        print("   Input a valid AutoPilot-generated config\n")
        print("   You must use a valid file generated by AutoPilot.\n   Any existing VFIO-based args will be kept.\n   AutoPilot-generated config scripts end in .sh")
        
        print(color.BOLD+"\n   Drag the *.sh file onto this window (or type the path) and hit ENTER.\n")
        apFileSelect = str(input(color.BOLD+"AutoPilot Config File> "+color.END))
        clear()
        time.sleep(1)
        if "'" in apFileSelect:
            apFileSelect = apFileSelect.replace("'","")
        if " " in apFileSelect:
            apFileSelect = apFileSelect.replace(" ","")
        if os.path.exists(apFileSelect):
            apFile = open(apFileSelect)
            if "APC-RUN" in apFile.read():
                print("\n\n   "+color.BOLD+color.GREEN+"✔ VALID AUTOPILOT CONFIG"+color.END,"")
                print("   Valid AutoPilot config found\n")
                print("   The file you selected was generated by AutoPilot.\n   It appears to be valid.\n")
                
                print(color.BOLD+"   "+apFile.name+color.END)
                print("\n   Do you want to use this file?\n   It will be copied to the repo folder.\n"+color.END)
                print(color.BOLD+"      1. Add VFIO-PCI to this file")
                print(color.END+"         Adds the generated arguments to this file\n")
                print(color.END+"      2. Select another file...")
                print(color.END+"      Q. Exit\n")
                apFile.close()
                detectChoice1 = str(input(color.BOLD+"Select> "+color.END))

                if detectChoice1 == "1":
                    apFilePath = apFileSelect
                    apFile = open(apFileSelect)
                    apFile = apFile.read()
                    apFileChosen = 1
                    clear()
                    #apFileR = apFile.read()
                    apFileChosen = 1
                    
                    clear()
                    if apFilePath is not None:
                        
                        print("\n\n   "+color.BOLD+color.BLUE+"⧖ APPLYING..."+color.END,"")
                        print("   Please wait\n")
                        print("   The assistant is now configuring your AutoPilot config file\n   for use with your VFIO-PCI devices.")
                        print(color.BOLD+"\n   This may take a few moments.\n   Your current config will be backed up.\n")
                        time.sleep(2)
                        if apFilePath[0] == "/" and apFilePath[1] == "/":
                            apFilePath = apFilePath.replace("/","",1)
                        if apFilePath[0] == "." and len(apFilePath) > 10:
                            apFilePath = apFilePath.replace(".","",1)
                        apFilePathNoExt = apFilePath.replace(".sh","")
                        os.system("cp "+apFilePath+" "+apFilePathNoExt+"-noPT.sh")
                        with open(apFilePath,"r") as file1:
                            apFileM = file1.read()
                            currentDispVal = slotCount
                            for y in range(slotCount):
                                currentDispVal = currentDispVal - 1
                                devLineF = str(deviceLines[currentDispVal])
                                apFileM = apFileM.replace("#VFIO_DEV_BEGIN","#VFIO_DEV_BEGIN\n"+devLineF)
                                apFileM = apFileM.replace("#-vga qxl","-vga none")
                                #apFileM = apFileM.replace("-monitor stdio","-monitor none")
                                apFileM = apFileM.replace("#-display none","-display none")
                                apFileM = apFileM.replace("REQUIRES_SUDO=0","REQUIRES_SUDO=1")
                                apFileM = apFileM.replace("VFIO_PTA=0","VFIO_PTA=1")
                                apFileM = apFileM.replace("-device qxl-vga,vgamem_mb=128,vram_size_mb=128    ","#-device qxl-vga,vgamem_mb=128,vram_size_mb=128   # DISABLED BY VFIO-PCI PASSTHROUGH ASSISTANT")
                                os.system("cp resources/ovmf/OVMF_CODE.fd ovmf/OVMF_CODE.fd")
                                os.system("cp resources/ovmf/OVMF_VARS_PT.fd ovmf/OVMF_VARS.fd")
                        file1.close

                        with open(apFilePath,"w") as file:
                            file.write(apFileM)

                    apFile = open(apFilePath,"r")
                    if devLineF in apFile.read():
                        clear()
                        print("\n\n   "+color.BOLD+color.GREEN+"✔ SUCCESS"+color.END,"")
                        print("   QEMU arguments have been added\n")
                        print("   The QEMU argument lines were successfully added to\n   "+color.BOLD+apFilePath+color.END+"\n\n\n\n\n\n\n")
                if detectChoice1 == "2":
                    clear()
                    manualAPSelect()
        else:
            print("\n\n   "+color.BOLD+color.RED+"✖ INVALID AUTOPILOT CONFIG"+color.END,"")
            print("   Your file was not a valid AutoPilot config\n")
            print("   You must use a valid file generated by AutoPilot.\n   Any existing VFIO-based args will be kept.\n   AutoPilot-generated config scripts end in .sh")
            
            print(color.BOLD+"\n   You will be returned to the input screen.\n")
            time.sleep(8)
            clear()
            manualAPSelect()


    for x in range(slotCount):
            #global slotContainer
            xF = str(x)
            currentEditVal = currentEditVal + 1
            currentVID = str(slotContainerPT[currentEditVal])
            currentType = str(slotContainerType[currentEditVal])
            currentROM = str(slotContainerROM[currentEditVal])
            currentROM = currentROM.replace("./","$REPO_PATH/")
            currentAddr = currentAddr + 1

            if currentROM != "skip" and currentROM != None and currentType == "gpu":
                #currentDeviceString = ("-device vfio-pci,host=\""+currentVID+"\",multifunction=on,romfile=\""+currentROM+"\","+"bus=rp1,addr=0x0."+str(currentAddr))
                currentDeviceString = ("-device vfio-pci,host=\""+currentVID+"\",multifunction=on,romfile=\""+currentROM+"\",bus=pcie.0")
            else: 
                #currentDeviceString = ("-device vfio-pci,host=\""+currentVID+"\",bus=rp1,addr=0x0."+str(currentAddr))
                currentDeviceString = ("-device vfio-pci,host=\""+currentVID+"\",bus=pcie.0")


            deviceLines.append(str(currentDeviceString))
            #print(currentDeviceString)
            #print(deviceLines)
            clear()

    print("\n\n   "+color.BOLD+color.GREEN+"✔ PASSTHROUGH ARGUMENTS READY"+color.END,"")
    print("   QEMU arguments are ready for use\n")
    print("   The QEMU argument lines listed below are ready to use in\n   your config file. Each line is for a single slot.\n")
    currentDispVal = -1
    for y in range(slotCount):
        currentDispVal = currentDispVal + 1
        devLineF = str(deviceLines[currentDispVal])
        print(color.BOLD+"   "+devLineF+color.END)
    print("\n   You can add these lines to a config manually, save them\n   to a file, or I can even add them for you automatically\n   if you've made a config file with AutoPilot previously.\n"+color.END)
    print(color.BOLD+"      1. Save and add automatically")
    print(color.END+"         Configure an existing AutoPilot script\n")
    print(color.END+"      2. Save to file")
    print(color.END+"      Q. Exit\n")
    detectChoice1 = str(input(color.BOLD+"Select> "+color.END))



    if detectChoice1 == "1":
        if os.path.exists("./vfio-args.txt"):
            os.system("mv ./vfio-args.txt ./blobs/stale/vfio-args.old")
        blob = open("./vfio-args.txt","w")
        blob.write("# QEMU ARGUMENTS GENERATED BY VFIO-PASSTHROUGH ASSISTANT\n# Part of the ultimate-macOS-KVM project by Coopydood <3\n\n")
        currentDispVal = -1
        for y in range(slotCount):
            currentDispVal = currentDispVal + 1
            devLineF = str(deviceLines[currentDispVal])
            blob.write(str(devLineF)+"\n")
        blob.close()
        clear()
        time.sleep(1)
        if os.path.exists("./blobs/user/USR_CFG.apb"):
            apFilePath = open("./blobs/user/USR_CFG.apb")
            apFilePath = apFilePath.read()
            if os.path.exists("./"+apFilePath):
                apFile = open("./"+apFilePath,"r")
                if "APC-RUN" in apFile.read():
                    print("\n\n   "+color.BOLD+color.GREEN+"✔ AUTOPILOT CONFIG AUTODETECTED"+color.END,"")
                    print("   Valid AutoPilot config found\n")
                    print("   An existing boot config file was found in the repo folder and\n   was generated by AutoPilot. It appears to be valid.\n")
                    
                    print(color.BOLD+"   "+apFile.name+color.END)
                    print("\n   Do you want to use this file?\n"+color.END)
                    print(color.BOLD+"      1. Add VFIO-PCI to detected file")
                    print(color.END+"         Adds the generated arguments to this file\n")
                    print(color.END+"      2. Select another file...")
                    print(color.END+"      Q. Exit\n")
                    apFile.close()
                    detectChoice2 = str(input(color.BOLD+"Select> "+color.END))

                    if detectChoice2 == "1":
                        #apFileR = apFile.read()
                        apFileChosen = 1
                        
                        clear()
                        if apFilePath is not None:
                            
                            print("\n\n   "+color.BOLD+color.BLUE+"⧖ APPLYING..."+color.END,"")
                            print("   Please wait\n")
                            print("   The assistant is now configuring your AutoPilot config file\n   for use with your VFIO-PCI devices.")
                            print(color.BOLD+"\n   This may take a few moments.\n   Your current config will be backed up.\n")
                            time.sleep(2)
                            apFilePathNoExt = apFilePath.replace(".sh","")
                            os.system("cp ./"+apFilePath+" ./"+apFilePathNoExt+"-noPT.sh")
                            with open("./"+apFilePath,"r") as file1:
                                apFileM = file1.read()
                                currentDispVal = slotCount
                                for y in range(slotCount):
                                    currentDispVal = currentDispVal - 1
                                    devLineF = str(deviceLines[currentDispVal])
                                    apFileM = apFileM.replace("#VFIO_DEV_BEGIN","#VFIO_DEV_BEGIN\n"+devLineF)
                                    apFileM = apFileM.replace("#-vga qxl","-vga none")
                                    #apFileM = apFileM.replace("-monitor stdio","-monitor none")
                                    apFileM = apFileM.replace("#-display none","-display none")
                                    apFileM = apFileM.replace("REQUIRES_SUDO=0","REQUIRES_SUDO=1")
                                    apFileM = apFileM.replace("VFIO_PTA=0","VFIO_PTA=1")
                                    apFileM = apFileM.replace("VFIO_DEVICES=0","VFIO_DEVICES="+str(slotCount))
                                    apFileM = apFileM.replace("-device qxl-vga,vgamem_mb=128,vram_size_mb=128","#-device qxl-vga,vgamem_mb=128,vram_size_mb=128   # DISABLED BY VFIO-PCI PASSTHROUGH ASSISTANT")
                                    os.system("cp resources/ovmf/OVMF_CODE.fd ovmf/OVMF_CODE.fd")
                                    os.system("cp resources/ovmf/OVMF_VARS_PT.fd ovmf/OVMF_VARS.fd")
                            file1.close

                            with open("./"+apFilePath,"w") as file:
                                file.write(apFileM)

                        apFile = open("./"+apFilePath,"r")
                        if devLineF in apFile.read():
                            clear()
                            print("\n\n   "+color.BOLD+color.GREEN+"✔ SUCCESS"+color.END,"")
                            print("   QEMU arguments have been added\n")
                            print("   The QEMU argument lines were successfully added to\n   "+color.BOLD+apFilePath+color.END+"\n\n\n\n\n\n\n")

                    if detectChoice2 == "2":
                        clear()
                        manualAPSelect()
                else:
                    clear()
                    manualAPSelect()
            else:
                clear()
                manualAPSelect()
        else:
            clear()
            manualAPSelect()

        
        #if os.path.exists

        

    elif detectChoice1 == "2":
        if os.path.exists("./vfio-args.txt"):
            os.system("mv ./vfio-args.txt ./blobs/stale/vfio-args.old")
        blob = open("./vfio-args.txt","w")
        blob.write("# QEMU ARGUMENTS GENERATED BY VFIO-PASSTHROUGH ASSISTANT\n# Part of the ultimate-macOS-KVM project by Coopydood <3\n\n")
        currentDispVal = -1
        for y in range(slotCount):
            currentDispVal = currentDispVal + 1
            devLineF = str(deviceLines[currentDispVal])
            blob.write(str(devLineF)+"\n")
        blob.close()
        time.sleep(1)
        if os.path.exists("./vfio-args.txt"):
            clear()
            print("\n\n   "+color.BOLD+color.GREEN+"✔ SUCCESS"+color.END,"")
            print("   QEMU arguments have been saved\n")
            print("   The QEMU argument lines were saved to\n   "+color.BOLD+"<repo>/vfio-args.txt\n\n\n\n\n\n\n")
        else:
            clear()
            print("\n\n   "+color.BOLD+color.RED+"✖ FAILED"+color.END,"")
            print("   QEMU arguments were not saved\n")
            print("   The QEMU argument could not be saved.\n   You may not have the necessary permissions.\n\n\n\n\n\n\n")
    elif detectChoice1 == "q" or detectChoice1 == "Q":
        exit
    #detectChoice3 = int(input(color.BOLD+"Select> "+color.END))
    
    #clear()
            #-device vfio-pci,host="$VFIO_ID_0",multifunction=on,romfile="$VFIO_ROM",bus=rp1,addr=0x0.0

def stage4():
    global slotCount
    global slotContainer
    global slotContainerPT
    global slotContainerType
    global currentVID
    global currentType
    global slotContainerROM
    slotContainerROM = []
    currentEditVal = -1
    
    for x in range(slotCount):
            #global slotContainer
            xF = str(x)
            currentEditVal = currentEditVal + 1
            currentVID = str(slotContainerPT[currentEditVal])
            currentType = str(slotContainerType[currentEditVal])


            output_stream = os.popen("lspci -k | grep "+"\""+currentVID+"\"")
            grepIDSingle = output_stream.read()

            clear()

            if currentType == "gpu":
                print("\n\n   "+color.BOLD+"Provide a GPU VBIOS ROM file"+color.END)
                print("   Select your dumped VBIOS ROM file")

                outputStyle = ("\n"+grepIDSingle)
                outputStyle = outputStyle.replace("\n","\n   ")
                outputStyle = outputStyle.replace("Audio device: ","")
                outputStyle = outputStyle.replace("Multimedia controller: ","")
                outputStyle = outputStyle.replace("VGA compatible controller: ","")

                print(outputStyle)
                print("   This is to correctly initialise the card.\n   You might not need a ROM file on some cards. If you know\n   that you don't need a VBIOS ROM file for your card, type \"skip\"."+color.END)
                
                
                print(color.BOLD+"\n      Drag the *.ROM file onto this window and hit ENTER.\n")
               
                romFile = str(input(color.BOLD+"ROM> "+color.END))

                if romFile == "skip":
                    slotContainerROM.append("skip")
                    
                else:
                    romFile = romFile.replace("'","")
                    romFilePath, romFileName = os.path.split(romFile)
                    romFileName = romFileName.replace("'","")
                    romFileName = romFileName.replace(" ","")
                    slotContainerROM.append("./roms/"+romFileName)
                    clear()
                    
                    
                    os.system("cp "+romFile+" ./roms/"+romFileName)
                    
                    clear()
                    print("Copying ROM to repo directory...")
                    time.sleep(2)
                    
            else:
                slotContainerROM.append("skip")
    stage5()



def stage3():
    global slotCount
    global slotContainer
    global slotContainerPT
    global slotContainerType
    global currentVID
    slotContainerType = []
    currentEditVal = -1
    currentVID = ""

    for x in range(slotCount):
            #global slotContainer
            xF = str(x)
            currentEditVal = currentEditVal + 1
            currentVID = str(slotContainerPT[currentEditVal])

            output_stream = os.popen("lspci -k | grep "+"\""+currentVID+"\"")
            grepIDSingle = output_stream.read()

            clear()
            print("\n\n   "+color.BOLD+"What kind of device is "+currentVID+"?"+color.END)
            print("   Choose a category closest to this device")

            outputStyle = ("\n"+grepIDSingle)
            outputStyle = outputStyle.replace("\n","\n   ")
            outputStyle = outputStyle.replace("Audio device: ","")
            outputStyle = outputStyle.replace("Multimedia controller: ","")
            outputStyle = outputStyle.replace("VGA compatible controller: ","")

            print(outputStyle)
            print("   This is so the best-known config can be used.\n   Based on the name, I think this device is in the bold category."+color.END)
            
            if "VGA" in grepIDSingle:
                print(color.BOLD+"\n      1. GPU video device")
            else:
                print(color.END+"\n      1. GPU video device")

            if "audio" in grepIDSingle or "Audio" in grepIDSingle:
                print(color.BOLD+"      2. GPU HDMI/DP audio device")
            else:
                print(color.END+"      2. GPU HDMI/DP audio device")  

            if "USB" in grepIDSingle:
                print(color.BOLD+"      3. USB host controller")
            else:
                print(color.END+"      3. USB host controller")

            if "Multimedia" in grepIDSingle:
                print(color.BOLD+"      4. Multimedia device")
            else:
                print(color.END+"      4. Multimedia device")

            if "VGA" in grepIDSingle or "audio" in grepIDSingle or "Audio" in grepIDSingle or "USB" in grepIDSingle or "Multimedia" in grepIDSingle:
                print(color.END+"      5. Other")
            else:
                print(color.BOLD+"      5. Other")
            print(color.END+"      Q. Exit\n")
            vfioType = str(input(color.BOLD+"Select>  "+color.END))

            if vfioType == "1":
                vfioType = "gpu"
            elif vfioType == "2":
                vfioType = "gpuAudio"
            elif vfioType == "3":
                vfioType = "usbCont"
            elif vfioType == "4":
                vfioType = "mmd"
            elif vfioType == "5":
                vfioType = "other"
            elif vfioType == "q" or vfioType == "Q":
                exit

            slotContainerType.append(vfioType)
            
    stage4()
            # print(slotContainerType)


def stage2():
    clear()
    print("Detecting devices, please wait...")
    time.sleep(0.5)

    output_stream = os.popen('lsusb | grep -B 2 "Device"')
    vgaGrep = output_stream.read()
    # lsusb | awk \'{ print $6 }\'
    output_stream1 = os.popen('lsusb | awk \'{ printf \"\033[1m\     " $6 \" \033[0m\" "》"; for (i = 7; i <= NF; i++) { printf $i \" \" } ; print \"\"}\' | sort -k1')
    vgaGrepNames = output_stream1.read()

    output_stream2 = os.popen('lsusb | awk \'{ print $6 }\'')
    vgaGrepIDOnly = output_stream2.read()

    vfioCount = vgaGrep.count("Device")
    #vfioCount = 0 #<--- uncomment to force-disable detection for error debugging
    clear()
    if vfioCount >= 1:
        print("\n\n   "+color.BOLD+color.GREEN+"USB Devices Detected!"+color.END,"")
        print("   The following devices are ready for passthrough\n")
        # print("   The devices listed below have been correctly configured to use\n   VFIO-PCI and are ready for full passthrough.\n")

        outputStyle = (vgaGrepNames)

        print(outputStyle)
        print("   You can now choose how many virtual USB slots you need.\n   Each entry you want to use needs its own slot. Type the\n   number of slots you want below now, or \"-1\" to exit.\n"+color.END)
        global slotCount
        slotCount = int(input(color.BOLD+"Value> "+color.END))
        clear()

        global slotContainer
        slotContainer = []

        #print(slotContainer)

        for x in range(slotCount):
            #global slotContainer
            xF = str(x)

         
                

            clear()
            print("\n\n   "+color.BOLD+"Assign Device to Slot #"+xF+color.END,"")
            print("   Choose a listed device to assign\n")
            print(f"   Type the ID of the USB device now.\n   {color.PURPLE}{color.BOLD}Format:{color.END}{color.BOLD} xxxx:xxxx{color.END}")

            outputStyle = ("\n"+vgaGrepNames)

            print(outputStyle)
            print("   You should only enter one entry consisting of 5 digits.\n"+color.END)
            thisSlot = str(input(color.BOLD+"Assign ID to Slot>  "+color.END))
            slotContainer.append(thisSlot)

            #print(slotContainer)
        
        clear()
        print("\n\n   "+color.BOLD+"Device Configuration Summary",color.END,"")
        print("   Check your slot allocations\n")
        print("   The slots listed below will be used with their assigned devices.\n   For each, you'll be asked what kind of device it is.\n")
        global slotContainerPT
        slotContainerPT = []
        currentSlotEdit = -1
        for i in slotContainer:
            currentSlotEdit = currentSlotEdit + 1
            editValue = str(slotContainer[currentSlotEdit])
            #print(editValue)
            editValue = editValue.replace(editValue[:2],(editValue[:2]+":"),1)
            editValue = editValue.replace(editValue[:5],(editValue[:5]+"."),1)
            #print(editValue)


            slotContainerPT.append(editValue)
            #print("slotContainerPT is now",slotContainerPT)


        currentSlotDisplay = -1
        
        for y in range(slotCount):

            currentSlotDisplay = currentSlotDisplay + 1
            print("   ",color.BOLD+"DEVICE #"+str(y)+":",color.END+slotContainerPT[currentSlotDisplay])
        print("\n   Continue when you're ready, or you can change devices and IDs.\n"+color.END)

        print(color.BOLD+"\n      1. Continue")
        print(color.END+"      2. Reconfigure...")
        print(color.END+"      Q. Exit\n")
        detectChoice1 = str(input(color.BOLD+"Select> "+color.END))
        if detectChoice1 == "1":
            stage3()
        elif detectChoice1 == "2":
            stage2()
        elif detectChoice1 == "q" or detectChoice1 == "Q":
            exit
        
    
    
    
    else:
        print("\n\n   "+color.BOLD+color.RED+"No USB Devices Found"+color.END,"")
        print("   There are no devices ready for passthrough\n")
        print("   No devices have been configured for use with USB. You must \n   consult the guide on how to do this. Until then, this\n   tool can't be used just yet.")
        #print("\n")
        #print("   \n   Type the VFIO-ID of the device now. (XX:XX.XX)\n"+color.END)
        print(color.BOLD+"\n      1. Try again")
        print(color.END+"      B. Back...")
        print(color.END+"      Q. Exit\n")
        detectChoice1 = str(input(color.BOLD+"Select> "+color.END))
        if detectChoice1 == "1":
            stage2()
        elif detectChoice1 == "B" or detectChoice1 == "b":
            stage1()
        elif detectChoice1 == "q" or detectChoice1 == "Q":
            exit


def stage1():
    clear()
    
    print("\n\n   "+color.BOLD+"System Requirements"+color.END,"")
    print("   Check your system meets this list\n")
    print("   Okay, so you're committed. Fair enough. But first, you need to make\n   sure your system is ready to even begin this nonsense.\n")
    #print(color.BOLD+"\n"+"Profile:"+color.END,"https://github.com/Coopydood")
    #print(color.BOLD+"   Repo:"+color.END,"https://github.com/Coopydood/ultimate-macOS-KVM")
    print(color.BOLD+"   1. Modern hardware"+color.END)
    print("      You must have a fairly modern PC to do this.")
    print(color.BOLD+"   2. BIOS configured correctly"+color.END)
    print("      Virtualisation and IOMMU *MUST* be enabled.")
    print(color.BOLD+"   3. UEFI"+color.END)
    print("      ...and more UEFI. Everything must be using it.")
    print(color.BOLD+"   4. vfio-pci kernel driver stubbing"+color.END)
    print("      The PCI devices in question must be stubbed correctly.")
    print(color.BOLD+"   5. Unwavering patience"+color.END)
    print("      You NEED to expect a LOT of trial and error. No I'm serious.")
    print(color.BOLD+"\n      1. Continue and detect devices")
    print(color.END+"      B. Back...")
    print(color.END+"      Q. Exit\n")
    detectChoice1 = str(input(color.BOLD+"Select> "+color.END))
    if detectChoice1 == "1":
        stage2()
    elif detectChoice1 == "B" or detectChoice1 == "b":
        startup()
    elif detectChoice1 == "q" or detectChoice1 == "Q":
        exit


startup()


if detectChoice == "1":
    clear()
    time.sleep(1)
    stage1()
elif detectChoice == "2":
    clear()
    os.system('./scripts/extras/gpu-check.py')

elif detectChoice == "B" or detectChoice == "b":
    os.system('./main.py')
elif detectChoice == "q" or detectChoice == "Q":
    exit