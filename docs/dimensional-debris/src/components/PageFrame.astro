---
import type { Props } from "@astrojs/starlight/props"
import { getImage } from "astro:assets"
import MobileMenuToggle from "@astrojs/starlight/components/MobileMenuToggle.astro"
import sequoiaLight from "../assets/SequoiaLight.jpg"
import sequoiaDark from "../assets/SequoiaDark.jpg"
import WindowControls from "./PageFrame/WindowControls.astro"

const { hasSidebar } = Astro.props

const sequoiaLightOptimized = await getImage({ src: sequoiaLight })
const sequoiaDarkOptimized = await getImage({ src: sequoiaDark })
---

<div class="page-wrapper h-screen">
  <div class="page sl-flex ultmos-window-shadow rounded-xl overflow-hidden">
    <div class="page-content">
      <header class="header">
        <slot name="header" />
      </header>
      {
        hasSidebar && (
          <nav class="sidebar">
            <MobileMenuToggle {...Astro.props} />
            <div id="starlight__sidebar" class="sidebar-pane">
              <div class="sidebar-controls">
                <WindowControls />
              </div>
              <div class="sidebar-content sl-flex">
                <slot name="sidebar" />
              </div>
            </div>
          </nav>
        )
      }

      <div class="main-frame">
        <slot />
      </div>
    </div>
  </div>
</div>

<style
  define:vars={{
    darkBackground: `url("${sequoiaDarkOptimized.src}")`,
    lightBackground: `url("${sequoiaLightOptimized.src}")`,
  }}
>
  :global(:root) .page-wrapper {
    --ultmos-background-image: var(--darkBackground);
  }
  :global(:root[data-theme="light"]) .page-wrapper {
    --ultmos-background-image: var(--lightBackground);
  }

  .page-wrapper {
    padding: var(--ultmos-window-padding);
    background-image: var(--ultmos-background-image);
    background-size: cover;
  }

  .page {
    flex-direction: column;
    position: relative;
    height: calc(100vh - 2 * var(--ultmos-window-padding));
  }

  .page-content {
    overflow-y: auto;
    height: 100%;
    scroll-padding-top: calc(var(--sl-nav-height) + 1.5rem);
  }

  .header {
    z-index: var(--sl-z-index-navbar);
    position: sticky;
    inset-inline-start: var(--ultmos-window-padding);
    inset-block-start: 0;
    width: 100%;
    height: var(--sl-nav-height);
    border-bottom: 1px solid var(--sl-color-hairline-shade);
    padding: var(--sl-nav-pad-y) var(--sl-nav-pad-x);
    padding-inline-end: var(--sl-nav-pad-x);
    background-color: var(--sl-color-bg-nav);
  }

  @media (min-width: 50rem) {
    :global([data-has-sidebar]) .header {
      inset-inline-start: var(--sl-sidebar-width);
      width: calc(100% - var(--sl-sidebar-width));
    }
  }

  :global([data-has-sidebar]) .header {
    padding-inline-end: calc(
      var(--sl-nav-gap) + var(--sl-nav-pad-x) + var(--sl-menu-button-size)
    );
  }

  .sidebar-pane {
    visibility: var(--sl-sidebar-visibility, hidden);
    position: absolute;
    z-index: var(--sl-z-index-menu);
    inset-inline-start: 0;
    inset-block-start: var(--sl-nav-height);
    inset-block-end: 0;
    width: 100%;
    background-color: var(--ultmos-black-translucent);
    backdrop-filter: blur(50px);
    display: flex;
    flex-direction: column;
  }

  :global([aria-expanded="true"]) ~ .sidebar-pane {
    --sl-sidebar-visibility: visible;
  }

  .sidebar-controls {
    padding: 1rem var(--sl-sidebar-pad-x);
  }

  .sidebar-content {
    overflow-y: auto;
    flex-grow: 1;
    padding: 0 var(--sl-sidebar-pad-x);
    flex-direction: column;
    gap: 1rem;
  }

  @media (min-width: 50rem) {
    .sidebar-content::after {
      content: "";
      padding-bottom: 1px;
    }
  }

  .main-frame {
    min-height: calc(100% - var(--sl-nav-height));
    background-color: var(--sl-color-bg-content);
    backdrop-filter: blur(150px);
    margin-inline-start: var(--sl-content-inline-start);
  }

  @media (min-width: 50rem) {
    :global([data-has-sidebar]) .header {
      padding-inline-end: var(--sl-nav-pad-x);
    }
    .sidebar-pane {
      --sl-sidebar-visibility: visible;
      width: var(--sl-sidebar-width);
      background-color: var(--sl-color-bg-sidebar);
      border-inline-end: 1px solid var(--sl-color-hairline-shade);
      inset-block-start: 0;
    }
  }
</style>
